load "gideon";

module render {
  
  function in_shadow(vec3 P, vec3 P_lt) bool {
    vec3 D = P_lt - P;
    ray r = ray(P, gideon.normalize(D), 5.0*gideon.epsilon, gideon.length(D) + 5.0*gideon.epsilon);
    isect hit;
    
    if (gideon.trace(r, hit)) return true;
    return false;
  }

  function eval_volume(ray r, isect hit, float step_size,
		       vec3 P, output vec4 throughput, output vec4 emit) vec3 {
    emit = vec4(0.0, 0.0, 0.0, 0.0);

    //determine how far the volume goes
    vec3 dir = gideon.ray:direction(r);
    vec3 inv_dir = vec3(-dir.x, -dir.y, -dir.z);

    ray depth_ray = ray(P, dir, 5.0*gideon.epsilon, 10000.0);
    
    isect depth_hit;
    if (!gideon.trace(depth_ray, depth_hit)) {
      throughput = vec4(1.0, 0.0, 0.0, 0.0);
      return P;
    }

    float thickness = gideon.isect:distance(depth_hit);
    int N = thickness / step_size;

    throughput = vec4(1.0, 1.0, 1.0, 1.0);

    if (step_size > thickness) step_size = thickness;
    float offset = gideon.max(0.0, thickness - (step_size*N));
    float t_prev = 0.0;
    
    for (float t = offset; t < thickness; t += step_size) {
      float d_t = t - t_prev;
      t_prev = t;
      
      vec3 Pt = gideon.ray:point_on_ray(depth_ray, t);
      dfunc volume = gideon.shade_volume(depth_ray, vec2(0.0, 0.0), hit);
      float unused;

      vec4 optical_thickness = d_t * gideon.dfunc:evaluate(volume, gideon.flags.volume,
							   Pt, inv_dir, Pt, dir, unused);
      vec4 d_emit = d_t * gideon.dfunc:emission(volume, gideon.flags.volume,
						Pt, inv_dir);
      
      throughput *= vec4(gideon.exp(-optical_thickness.x),
			 gideon.exp(-optical_thickness.y),
			gideon.exp(-optical_thickness.z),
			1.0);
      emit += throughput * d_emit;
    }
    
    return gideon.ray:point_on_ray(depth_ray, thickness);
  }

  function sample_direct(dfunc surface, vec3 P, vec3 w_out, int N,
			 output int light_pos_sample_idx, output int light_idx_sample_idx) vec4 {
    vec4 L = vec4(0.0, 0.0, 0.0, 0.0);

    int num_lights = gideon.scene:num_lights();

    float inv_N = 1.0 / N;

    for (int i = 0; i < N; i += 1) {
      float idx_rand = 0.0;
      if (light_idx_sample_idx > -1) {
	idx_rand = gideon.sampler:get_1d(light_idx_sample_idx);
	light_idx_sample_idx++;
      }
      else idx_rand = gideon.random();
      
      int light_idx = (num_lights * idx_rand);
      if (light_idx > (num_lights - 1)) light_idx = num_lights - 1;
      
      light lt = gideon.scene:get_light(light_idx);

      float light_pdf;

      vec2 L_sample = vec2(0.0, 0.0);
      if (light_pos_sample_idx > -1) {
        L_sample = gideon.sampler:get_2d(light_pos_sample_idx);
	light_pos_sample_idx++;
      }
      else L_sample = vec2(gideon.random(), gideon.random());
      
      vec4 tmp_P = gideon.light:sample_position(lt, P, L_sample.x, L_sample.y, light_pdf);
      vec3 P_lt = vec3(tmp_P.x, tmp_P.y, tmp_P.z);
      
      if (!in_shadow(P, P_lt)) {
	//evaluate the radiance from the light
	vec3 I = gideon.normalize(P_lt - P);
	vec4 R = gideon.light:eval_radiance(lt, P, I);
	  
	//shade this point
	float pdf;
	vec4 refl = gideon.dfunc:evaluate(surface, gideon.flags.any, P, I, P, w_out, pdf) * R;
	L += (num_lights * inv_N / light_pdf) * refl;
      }
    }

    return num_lights * L;
  }
  
  function shade(ray r, int min_path, int path_length, int light_samples,
		 int[] bsdf_sample_id_arr, int[] bsdf_select_id_arr,
		 int[] light_pos_sample_id_arr, int[] light_idx_sample_id_arr) vec4 {
    vec4 Li = vec4(0.0, 0.0, 0.0, 0.0);
    vec4 throughput = vec4(1.0, 1.0, 1.0, 1.0);
    
    float prob_continue = 0.5;
    float inv_prob = 1.0 / prob_continue;
    int L_samples = light_samples;

    for (int i = 0; i < path_length; i += 1) {
      int bsdf_sample_idx = -1;
      int bsdf_select_idx = -1;
      
      int light_pos_sample_idx = -1;
      int light_idx_sample_idx = -1;

      if (i < bsdf_sample_id_arr.length) {
	bsdf_sample_idx = gideon.sampler:get_offset(bsdf_sample_id_arr[i]);
	bsdf_select_idx = gideon.sampler:get_offset(bsdf_select_id_arr[i]);
      }
      
      if (i < light_pos_sample_id_arr.length) {
	light_pos_sample_idx = gideon.sampler:get_offset(light_pos_sample_id_arr[i]);
	light_idx_sample_idx = gideon.sampler:get_offset(light_idx_sample_id_arr[i]);
      }
      
      isect ray_hit;
      if (!gideon.trace(r, ray_hit)) break; //hit nothing
      
      //evaluate material at this point
      vec3 P = gideon.ray:point_on_ray(r, gideon.isect:distance(ray_hit));
      vec3 w_out = gideon.normalize(gideon.ray:origin(r) - P);
      
      if (gideon.primitive:has_volume(gideon.isect:primitive_id(ray_hit))) {
	//use the volume rendering code for this object
	vec4 vol_emit;
	vec4 vol_throughput;
	vec3 out_P = eval_volume(r, ray_hit, 0.05,
				 P, vol_throughput, vol_emit);
	r = ray(out_P, gideon.ray:direction(r), 5.0*gideon.epsilon, 10000.0);
	throughput *= vol_throughput;
	Li += vol_emit;
	continue;
      }

      dfunc surface = gideon.shade(r, vec2(0.0, 0.0), ray_hit);
      shader_flag flags = gideon.dfunc:flags(surface);
      
      //sample direct illumination
      if (i > min_path) L_samples = 1;
      else {
	if (i > 0) L_samples /= 2;
	if (L_samples < 1) L_samples = 1;
      }
      
      vec4 Ld = sample_direct(surface, P, w_out, L_samples, light_pos_sample_idx, light_idx_sample_idx);
      Li += throughput * Ld;
      
      //possibly terminate path
      if (i > min_path) {
	if (gideon.random() > prob_continue) break;
	throughput = inv_prob * throughput;
      }
      
      //add emitted light from this surface
      if (flags && gideon.flags.emissive) {
	Li += throughput * gideon.dfunc:emission(surface, gideon.flags.any, P, w_out);
      }
      
      //sample bsdf to get new direction
      vec2 rand_P = vec2(0.0, 0.0);
      vec2 rand_w = vec2(0.0, 0.0);

      if (bsdf_sample_idx > -1) {
	rand_w = gideon.sampler:get_2d(bsdf_sample_idx);
	bsdf_sample_idx++;
      }
      else rand_w = vec2(gideon.random(), gideon.random());

      float rand_D = 0.0;
      if (bsdf_select_idx > -1) {
	rand_D = gideon.sampler:get_1d(bsdf_select_idx);
	bsdf_select_idx++;
      }
      else rand_D = gideon.random();
      
      vec3 P_in;
      vec3 w_in;
      
      float pdf = gideon.dfunc:sample(surface, gideon.flags.any,
				      P, w_out,
				      rand_D, rand_P, rand_w,
				      P_in, w_in);
      if (pdf < 0.0001) break;
      
      r = ray(P_in, w_in, 5.0*gideon.epsilon, 10000.0);
      
      float tmp;
      throughput *= (1.0 / pdf) * gideon.dfunc:evaluate(surface, gideon.flags.any, P_in, w_in, P, w_out, tmp);
    }
    
    Li.w = 1.0;
    return Li;
  }

}



//Renderer Entry Point
module start {
  
  entry function main(int x0, int y0, int width, int height, scene output_buffer) void {
    int samples_per_pixel = 4;

    int num_light_samples = 8;
    int num_bsdf_samples = 1;

    int min_path_length = 6;
    int max_path_length = 8;

    float inv_samples = 1.0 / samples_per_pixel;
    
    gideon.sampler:setup(width, height, samples_per_pixel, "lhs");

    int[4] light_sample_ids;
    int[4] light_idx_sample_ids;

    int[4] bsdf_sample_ids;
    int[4] bsdf_select_sample_ids;
    
    for (int i = 0; i < 4; ++i) {
      light_idx_sample_ids[i] = gideon.sampler:add("lhs", 1, num_light_samples);
      light_sample_ids[i] = gideon.sampler:add("lhs", 2, num_light_samples);
      bsdf_sample_ids[i] = gideon.sampler:add("lhs", 2, num_bsdf_samples);
      bsdf_select_sample_ids[i] = gideon.sampler:add("lhs", 1, num_bsdf_samples);
    }
    
    for (int y = 0; y < height; y += 1) {
      for (int x = 0; x < width; x += 1) {
	vec2 pix = vec2(x0 + x, y0 + y);
	vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
	
	for (int i = 0; i < samples_per_pixel; i += 1) {
	  vec2 sample;
   	  gideon.sampler:next_sample(x, y, sample);
	  sample += pix;
	  
	  //shoot a ray from the camera to the scene
	  ray r = gideon.camera:shoot_ray(sample.x, sample.y);
	  
	  color += inv_samples * render.shade(r, min_path_length, max_path_length, num_light_samples,
					      bsdf_sample_ids, bsdf_select_sample_ids, light_sample_ids, light_idx_sample_ids);
	}
	
	color.w = 1.0;
	gideon.write_pixel(x, y, width, height, color, output_buffer);
      }
    }
  }
  
}
