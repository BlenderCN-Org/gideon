load "/home/curtis/Projects/relatively-crazy/src/standard/gideon.gdl";

module render {
  
  module demo {
    extern function __gen_shadow_ray(output vec3 O, output vec3 D, float max_t, output ray r) void : gde_gen_ray;
    function shadow_ray(vec3 O, vec3 D, float max_t) ray { ray r; __gen_shadow_ray(O, D, max_t, r); return r; }
  }
  
  function in_shadow(vec3 P, vec3 P_lt) bool {
    vec3 D = P_lt - P;
    ray r = demo.shadow_ray(P, gideon.normalize(D), gideon.length(D));
    isect hit;

    if (gideon.trace(r, hit)) return true;
    return false;
  }

  function eval_direct(dfunc surface, vec3 O,
		       vec3 P, vec3 w_out) vec4 {
    vec4 L = vec4(0.0, 0.0, 0.0, 0.0);
    
    int num_samples = 3;
    float fN = 3.0;
    float inv_N = 1.0 / fN;

    for (int i = 0; i < gideon.scene:num_lights(); i += 1) {
      light lt = gideon.scene:get_light(i);

      for (int sample = 0; sample < num_samples; sample += 1) {

	//sample a position on the light source
	float light_pdf;
	vec4 lP_4 = gideon.light:sample_position(lt, P, gideon.random(), gideon.random(), light_pdf);
	vec3 lP = vec3(lP_4.x, lP_4.y, lP_4.z);
	
	if (in_shadow(P, lP)) { }
	else {
	  //evaluate the radiance from the light
	  vec3 I = gideon.normalize(lP - P);
	  vec4 R = gideon.light:eval_radiance(lt, P, I);
	  
	  //shade this point
	  float pdf;
	  vec4 refl = gideon.dfunc:evaluate(surface, P, I, P, w_out, pdf) * R;
	  L = L + (inv_N / light_pdf) * refl;
	}
      }
    }
    
    return L;
  }

  function eval_indirect(dfunc surface, vec3 P, vec3 w_out, int depth) vec4 {
    vec4 L = vec4(0.0, 0.0, 0.0, 0.0);
    
    int num_samples = 8;
    float fN = 8.0;
    float inv_N = 1.0 / fN;

    //sample the distribution
    for (int sample = 0; sample < num_samples; sample += 1) {
      vec2 rand_P = vec2(0.0, 0.0);
      vec2 rand_w = vec2(gideon.random(), gideon.random());
      vec3 P_in;
      vec3 w_in;

      float pdf = gideon.dfunc:sample(surface, P, w_out,
				      rand_P, rand_w,
				      P_in, w_in);
      if (pdf < 0.00001) continue;

      ray r = demo.shadow_ray(P_in, w_in, 1000.0);
      isect hit;
      if (gideon.trace(r, hit)) {
	dfunc s = gideon.shade(r, vec2(0.0, 0.0), hit);
	vec3 P_shade = gideon.ray:point_on_ray(r, gideon.isect:distance(hit));
	vec4 R = eval_direct(s, P_in,
			     P_shade,
			     w_in);
	float tmp;
	vec4 refl = gideon.dfunc:evaluate(surface, P_in, w_in, P, w_out, tmp) * R;

	if (depth > 0) {
	  vec4 fac = gideon.dfunc:evaluate(surface, P_in, w_in, P, w_out, tmp);
	  vec4 R = eval_indirect(s, P_shade, -1.0*w_in, depth - 1);
	  refl += fac * R;
	}
	
	L = L + (inv_N / pdf) * refl;
      }
    }
    
    return L;
  }

  function shade(ray r) vec4 {
    isect ray_hit; //will contain information about whatever the ray hits
    if (gideon.trace(r, ray_hit)) {
      //find the surface normal, dot it with the light
      vec3 O = gideon.ray:origin(r);
      vec3 P = gideon.ray:point_on_ray(r, gideon.isect:distance(ray_hit));

      dfunc surface = gideon.shade(r, vec2(0.0, 0.0), ray_hit);
      vec3 w_out = gideon.normalize(O - P);
      vec4 L = eval_direct(surface, O,
			   P, w_out);
      L += eval_indirect(surface, P, w_out, 1);
      
      return vec4(L.x, L.y, L.z, 1.0);
    }

    //hit nothing, draw black
    return vec4(0.0, 0.0, 0.0, 1.0);
  }
}

//Renderer Entry Point
function main(int x0, int y0, int width, int height, scene output_buffer) void {
  for (int y = 0; y < height; y += 1) {
    for (int x = 0; x < width; x += 1) {
      //shoot a ray from the camera to the scene
      ray r = gideon.camera:shoot_ray(x0 + x, y0 + y);
      vec4 color = render.shade(r);
      
      gideon.write_pixel(x, y, width, height, color, output_buffer);
    }
  }
}
