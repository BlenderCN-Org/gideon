/*

  Copyright 2013 Curtis Andrus

  This file is part of Gideon.

  Gideon is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  Gideon is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with Gideon.  If not, see <http://www.gnu.org/licenses/>.

*/

/** Gideon Standard Library Functions **/
module gideon {

  /* Constants */

  float pi = 3.14159265359;
  float epsilon = 0.00001;
  
  /* Math */

  extern function exp(float x) float : gde_exp_f;
  extern function pow(float x, float y) float : gde_pow_f;

  function min(float x, float y) float {
    if (x < y) return x;
    return y;
  }

  function max(float x, float y) float {
    if (x > y) return x;
    return y;
  }

  function clamp(float x, float low, float high) float {
    return min(max(x, low), high);
  }

  function abs(float f) float {
    if (f < 0.0) return -f;
    return f;
  }

  /* Sampling */

  extern function __cosine_sample_hemisphere(output vec3 N,
					     float rand_u, float rand_v,
					     output vec3 rt) void : gde_cosine_sample_hemisphere;
  function cosine_sample_hemisphere(vec3 N, float rand_u, float rand_v) vec3 {
    vec3 rt;
    __cosine_sample_hemisphere(N, rand_u, rand_v, rt);
    return rt;
  }

  /* Random Number Generation */

  extern function __random(scene s) float : gde_random;
  function random() float { return __random(__gd_scene); }

  /* Vector Operations */

  extern function __dot_v3(output vec3 A, output vec3 B) float : gde_dot_v3;
  function dot(vec3 A, vec3 B) float { return __dot_v3(A, B); }

  extern function __normalize_v3(output vec3 V, output vec3 N) void : gde_normalize_v3;
  function normalize(vec3 V) vec3 { vec3 N; __normalize_v3(V, N); return N; }

  extern function __length_v3(output vec3 V) float : gde_length_v3;
  function length(vec3 V) float { return __length_v3(V); }

  extern function __make_orthonormals(output vec3 N,
				      output vec3 T, output vec3 B) void : gde_make_orthonormals;
  function make_orthonormals(vec3 N,
			     output vec3 T, output vec3 B) void {
    __make_orthonormals(N, T, B);
  }

  extern function __spherical_direction(output vec3 N, output vec3 T, output vec3 B,
					float sin_theta, float cos_theta, float phi,
					output vec3 V) void : gde_spherical_direction;
  function spherical_direction(vec3 N, vec3 T, vec3 B,
			       float sin_theta, float cos_theta, float phi) vec3 {
    vec3 V;
    __spherical_direction(N, T, B, sin_theta, cos_theta, phi, V);
    return V;
  }

  /* Camera */

  //Generates a ray from the camera in the direction of the given pixel.
  extern function __camera_shoot_ray(int x, int y, scene s, output ray r) void : gde_camera_shoot_ray;
  function camera:shoot_ray(int x, int y) ray {
    ray r;
    __camera_shoot_ray(x, y, __gd_scene, r);
    return r;
  }

  extern function __camera_shoot_ray(float x, float y, scene s, output ray r) void : gde_camera_shoot_ray_f;
  function camera:shoot_ray(float x, float y) ray {
    ray r;
    __camera_shoot_ray(x, y, __gd_scene, r);
    return r;
  }

  /* Ray/Intersection Access */

  extern function __isect_distance(output isect i) float : gde_isect_dist;
  function isect:distance(isect i) float { return __isect_distance(i); }

  extern function __isect_normal(output isect i, scene s, output vec3 N) void : gde_isect_normal;
  function isect:normal(isect i) vec3 { vec3 N; __isect_normal(i, __gd_scene, N); return N; }

  extern function __isect_smooth_normal(output isect i, scene s, output vec3 N) void : gde_isect_smooth_normal;
  function isect:smooth_normal(isect i) vec3 { vec3 N; __isect_smooth_normal(i, __gd_scene, N); return N; }

  extern function __isect_primitive_id(output isect i) int : gde_isect_primitive_id;
  function isect:primitive_id(isect i) int { return __isect_primitive_id(i); }

  extern function __isect_uv(output isect i, output vec2 uv) void : gde_isect_uv;
  function isect:uv(isect i) vec2 { vec2 uv; __isect_uv(i, uv); return uv; }

  extern function __ray_point_on_ray(output ray r, float t, output vec3 P) void : gde_ray_point_on_ray;
  function ray:point_on_ray(ray r, float t) vec3 { vec3 P; __ray_point_on_ray(r, t, P); return P; }

  extern function __ray_origin(output ray r, output vec3 O) void : gde_ray_origin;
  function ray:origin(ray r) vec3 { vec3 O; __ray_origin(r, O); return O; }

  extern function __ray_direction(output ray r, output vec3 D) void : gde_ray_direction;
  function ray:direction(ray r) vec3 { vec3 D; __ray_direction(r, D); return D; }

  /* Object/Primitive Access */

  extern function __primitive_shader(scene s, int p) shader_handle : gde_primitive_shader;
  function primitive:shader(int p) shader_handle { return __primitive_shader(__gd_scene, p); }
 
  extern function __primitive_has_surface(scene s, int p) bool : gde_primitive_has_surface;
  function primitive:has_surface(int p) bool { return __primitive_has_surface(__gd_scene, p); }
 
  extern function __primitive_volume_shader(scene s, int p) shader_handle : gde_primitive_volume_shader;
  function primitive:volume_shader(int p) shader_handle { return __primitive_volume_shader(__gd_scene, p); }
  
  extern function __primitive_has_volume(scene s, int p) bool : gde_primitive_has_volume;
  function primitive:has_volume(int p) bool { return __primitive_has_volume(__gd_scene, p); }

  /* Attribute Access */

  extern function __primitive_get_attribute(scene s, int p, output string name,
					    output vec4 coords, output float result) bool : gde_primitive_get_attribute_f;
  function primitive:get_attribute(int p, string name,
				   vec4 coords, output float result) bool {
    return __primitive_get_attribute(__gd_scene, p, name, coords, result);
  }

  extern function __primitive_get_attribute(scene s, int p, output string name,
					    output vec4 coords, output vec2 result) bool : gde_primitive_get_attribute_v2;
  function primitive:get_attribute(int p, string name,
				   vec4 coords, output vec2 result) bool {
    return __primitive_get_attribute(__gd_scene, p, name, coords, result);
  }

  extern function __primitive_get_attribute(scene s, int p, output string name,
					    output vec4 coords, output vec3 result) bool : gde_primitive_get_attribute_v3;
  function primitive:get_attribute(int p, string name,
				   vec4 coords, output vec3 result) bool {
    return __primitive_get_attribute(__gd_scene, p, name, coords, result);
  }

  extern function __primitive_get_attribute(scene s, int p, output string name,
					    output vec4 coords, output vec4 result) bool : gde_primitive_get_attribute_v4;
  function primitive:get_attribute(int p, string name,
				   vec4 coords, output vec4 result) bool {
    return __primitive_get_attribute(__gd_scene, p, name, coords, result);
  }

  /* Scene Query */

  //Traces a ray through the scene.
  extern function __trace(output ray r, output isect hit,
			  output int aabb_count, output int prim_count, scene s) bool : gde_trace;
  function trace(ray r, output isect hit) bool {
    int unused;
    return __trace(r, hit, unused, unused, __gd_scene);
  }

  function trace(ray r, output isect hit, output int aabb_count, output int prim_count) bool {
    return __trace(r, hit, aabb_count, prim_count, __gd_scene);
  }

  /* Sampling */

  extern function __setup_sampler(scene s,
				  int width, int height, int samples_per_pixel,
				  output string generator) void : gde_setup_sampler;
  function sampler:setup(int width, int height, int samples_per_pixel, string generator) void {
    __setup_sampler(__gd_scene, width, height, samples_per_pixel, generator);
  }

  extern function __sampler_add(scene s,
				output string generator,
				int dim, int N) int : gde_add_sample;
  function sampler:add(string generator, int dim, int N) int { return __sampler_add(__gd_scene, generator, dim, N); }

  extern function __sampler_next_sample(scene s, int x, int y,
					output vec2 sample) void : gde_next_sample;
  function sampler:next_sample(int x, int y, output vec2 sample) void { __sampler_next_sample(__gd_scene, x, y, sample); }

  extern function __sampler_get_offset(scene s, int id) int : gde_sample_offset;
  function sampler:get_offset(int id) int { return __sampler_get_offset(__gd_scene, id); }
  
  extern function __sampler_get_1d(scene s, int idx) float : gde_sample_get_1d;
  function sampler:get_1d(int idx) float { return __sampler_get_1d(__gd_scene, idx); }

  extern function __sampler_get_2d(scene s, int idx, output vec2 sample) void : gde_sample_get_2d;
  function sampler:get_2d(int idx) vec2 { vec2 sample; __sampler_get_2d(__gd_scene, idx, sample); return sample; }

  /* Lights */
  
  //Returns the number of lights in the current scene.
  extern function __scene_num_lights(scene s) int : gde_scene_num_lights;
  function scene:num_lights() int { return __scene_num_lights(__gd_scene); }

  //Returns a reference to a light in the scene.
  extern function __scene_get_light(scene s, int id, output light l) void : gde_scene_get_light;
  function scene:get_light(int id) light {
    light l;
    __scene_get_light(__gd_scene, id, l);
    return l;
  }

  //Given two uniform random numbers in [0, 1], samples a position on the given light.
  //If the position's 'w' coordinate is 0, the light is directional.
  extern function __light_sample_position(light lt, output vec3 P, float rand_u, float rand_v,
					  output float pdf, output vec4 P_out) void : gde_light_sample_position;
  function light:sample_position(light lt, vec3 P, float rand_u, float rand_v, output float pdf) vec4 {
    vec4 P_out;
    __light_sample_position(lt, P, rand_u, rand_v, pdf, P_out);
    return P_out;
  }
  
  //Evaluates the radiance of the light at the given point.
  extern function __light_eval_radiance(light lt, output vec3 P, output vec3 I,
					output vec4 R) void : gde_light_eval_radiance;
  function light:eval_radiance(light lt, vec3 P, vec3 I) vec4 {
    vec4 R;
    __light_eval_radiance(lt, P, I, R);
    return R;
  }
  
  /* Shading */

  //Evaluates a distribution function.
  extern function __dfunc_eval(output dfunc d, shader_flag mask,
			       output vec3 P_in, output vec3 w_in,
			       output vec3 P_out, output vec3 w_out,
			       output float pdf, output vec4 out) void : gde_dfunc_eval;
  function dfunc:evaluate(dfunc d, shader_flag mask,
			  vec3 P_in, vec3 w_in,
			  vec3 P_out, vec3 w_out,
			  output float pdf) vec4 {
    vec4 out;
    __dfunc_eval(d, mask, P_in, w_in, P_out, w_out, pdf, out);
    return out;
  }

  //Samples a distribution function.
  extern function __dfunc_sample(output dfunc d, shader_flag mask,
				 output vec3 P_out, output vec3 w_out,
				 float rand_D, output vec2 rand_P, output vec2 rand_w,
				 output vec3 P_in, output vec3 w_in) float : gde_dfunc_sample;
  function dfunc:sample(dfunc d, shader_flag mask,
			vec3 P_out, vec3 w_out,
			float rand_D, vec2 rand_P, vec2 rand_w,
			output vec3 P_in, output vec3 w_in) float {
    return __dfunc_sample(d, mask, P_out, w_out, rand_D, rand_P, rand_w, P_in, w_in);
  }

  //Returns the amount of emitted light from a distribution.
  extern function __dfunc_emission(output dfunc d, shader_flag mask,
				   output vec3 P_out, output vec3 w_out,
				   output vec4 Le) void : gde_dfunc_emission;
  function dfunc:emission(dfunc d, shader_flag mask, vec3 P_out, vec3 w_out) vec4 {
    vec4 Le;
    __dfunc_emission(d, mask, P_out, w_out, Le);
    return Le;
  }

  //Determines value of the distribution's pdf for given directions.
  extern function __dfunc_pdf(output dfunc d, shader_flag mask,
			      output vec3 P_in, output vec3 w_in,
			      output vec3 P_out, output vec3 w_out) float : gde_dfunc_pdf;
  function dfunc:pdf(dfunc d, shader_flag mask,
		     vec3 P_in, vec3 w_in,
		     vec3 P_out, vec3 w_out) float { return __dfunc_pdf(d, mask, P_in, w_in, P_out, w_out); }

  //Returns the combined flags of the distribution.
  extern function __dfunc_flags(output dfunc d) shader_flag : gde_dfunc_flags;
  function dfunc:flags(dfunc d) shader_flag { return __dfunc_flags(d); }

  //Returns true if a shader handle references a valid shader function.
  extern function shader_handle:is_valid(shader_handle h) bool : gde_shader_handle_is_valid;
  
  //Evaluates the shader of whatever object the ray hit, returning the associated distribution.
  function shade(ray r, vec2 coords, isect hit) dfunc {
    int prim_id = isect:primitive_id(hit);
    shader_handle shader = primitive:shader(prim_id);
    return dfunc(shader, r, coords, hit);
  }

  //Evaluates the shader of whatever object the ray hit, returning the associated distribution.
  function shade_volume(ray r, vec2 coords, isect hit) dfunc {
    int prim_id = isect:primitive_id(hit);
    shader_handle shader = primitive:volume_shader(prim_id);
    return dfunc(shader, r, coords, hit);
  }
  
  /* Render Output */

  //Writes a color to the output buffer at the given coordinates.
  extern function __write_pixel(int x, int y, int w, int h, output vec4 color, scene buffer) void : gde_write_pixel;
  function write_pixel(int x, int y, int w, int h, vec4 color, scene buffer) void { __write_pixel(x, y, w, h, color, buffer); }

  /* Builtin Distributions */

  //Standard set of shader flags used by all the distributions.
  module flags {
    shader_flag any = shader_flag(0); //Can be passed to evaluate(), sample(), etc. functions to indicate a lack of interest in the shader's flags.

    shader_flag bsdf = shader_flag(1);
    shader_flag delta = shader_flag(2);    //Contains a delta function (like perfect specular reflections).
    shader_flag override = shader_flag(3); //Distribution should be excluded from any lighting calculations (it handles that manually).
    shader_flag emissive = shader_flag(4); //Emits light.

    shader_flag diffuse = shader_flag(5);
    shader_flag specular = shader_flag(6);
    shader_flag transparent = shader_flag(7);

    shader_flag volume = shader_flag(8);
    shader_flag subsurface = shader_flag(9);
  }

  /*
    Simple Lambertian Reflectance.
    Parameters:
      N     -- Shading Normal
      Ng    -- Geometry Normal
      k     -- Reflectance Factor
      color -- Reflected Color
  */
  distribution[flags.bsdf, flags.diffuse] lambert(vec3 N, vec3 Ng, float k, vec4 color) {
    
    function eval_pdf(float dot_N) float {
      return dot_N / pi;
    }

    function evaluate(vec3 P_in, vec3 w_in,
		      vec3 P_out, vec3 w_out,
		      output float pdf) vec4 {
      float z = abs(dot(N, w_in));
      pdf = eval_pdf(z);

      float fac = k*z;
      return fac * color;
    }

    function sample(vec3 P_out, vec3 w_out,
		    vec2 rand_P, vec2 rand_w,
		    output vec3 P_in, output vec3 w_in) float {
      P_in = P_out;
      w_in = cosine_sample_hemisphere(N, rand_w.x, rand_w.y);
      
      float z = dot(Ng, w_in);
      if ((z * dot(Ng, w_out)) < 0.0) return 0.0; //directions are on different sides of the hemisphere
      return eval_pdf(abs(dot(N, w_in)));
    }

  }

  /*
    Microfacet Model using Blinn Distribution.
   */
  distribution[flags.bsdf, flags.specular] blinn(vec3 N, vec3 Ng, float e, float eta, float k) {
    
    function eval_pdf(float cos_theta, vec3 w_out, vec3 w_h) float {
      float p_h = (e + 2.0) * pow(cos_theta, e) / (2.0 * pi);
      return p_h / (4.0 * dot(w_out, w_h));
    }

    function D(float cos_wh) float {
      float c = (e + 2.0) / (2.0 * pi);
      return c * pow(cos_wh, e);
    }

    function G(float cos_wh, float cos_wi, float cos_wo,
	       vec3 w_in, vec3 w_out) float {
      float dot_Nh = abs(cos_wh);
      float dot_Ni = abs(cos_wi);
      float dot_No = abs(cos_wo);
      float dot_io = abs(dot(w_in, w_out));
      
      return min(1.0, min((2.0 * dot_Nh * dot_No) / dot_io,
			  (2.0 * dot_Nh * dot_Ni) / dot_io));
    }

    function F(float cos_wh) float {
      float dot_Nh = abs(cos_wh);

      float tmp = (eta*eta + k*k) * (dot_Nh * dot_Nh);
      float rpar2 = (tmp - (2.0 * eta * dot_Nh) + 1.0) /
	(tmp + (2.0 * eta * dot_Nh) + 1.0);
      
      float tmp_f = eta*eta + k*k;
      float dot2 = dot_Nh * dot_Nh;

      float rperp2 = (tmp_f - (2.0 * eta * dot_Nh) + dot2) /
	(tmp_f + (2.0 * eta * dot_Nh) + dot2);

      return (rpar2 + rperp2) / 2.0;
    }

    function evaluate(vec3 P_in, vec3 w_in,
		      vec3 P_out, vec3 w_out,
		      output float pdf) vec4 {
      vec3 w_h = normalize(w_in + w_out);
      float cos_wh = dot(w_h, N);
      float cos_wo = dot(w_out, N);
      float cos_wi = dot(w_in, N);

      pdf = eval_pdf(dot(w_h, N), w_out, w_h);

      //float denom = 4.0 * cos_wo * cos_wi;
      float denom = 4.0 * cos_wo; //the cos_wi term was removed because we multiply by the dot product in the distribution
      float val =  D(cos_wh) * G(cos_wh, cos_wi, cos_wo, w_in, w_out) * F(cos_wh) / denom;
      return vec4(val, val, val, 1.0);
    }

    function sample(vec3 P_out, vec3 w_out,
		    vec2 rand_P, vec2 rand_w,
		    output vec3 P_in, output vec3 w_in) float {
      P_in = P_out;

      //sample half vector
      float cos_theta = pow(rand_w.x, 1.0 / (e + 1.0));
      float sin_theta = pow(max(0.0, 1.0 - cos_theta*cos_theta), 0.5);
      float phi = rand_w.y * 2.0 * pi;

      vec3 T;
      vec3 B;
      make_orthonormals(N, T, B);
      vec3 H = spherical_direction(N, T, B, sin_theta, cos_theta, phi);
      if (dot(w_out, H) < 0.0) H = -1.0 * H;

      //compute incident direction by reflecting about half vector
      w_in = (2.0 * dot(w_out, H) * H) - w_out;

      //compute pdf
      return eval_pdf(cos_theta, w_out, H);
    }

  }

  /*
    Emission only distribution.
    Parameters:
      color -- Emitted Color
  */
  distribution[flags.emissive] emission(vec4 color) {
    
    function emission(vec3 P_out, vec3 w_out) vec4 { return color; }

    function evaluate(vec3 P_in, vec3 w_in,
		      vec3 P_out, vec3 w_out,
		      output float pdf) vec4 {
      pdf = 0.0;
      return vec4(0.0, 0.0, 0.0, 1.0);
    }

    function sample(vec3 P_out, vec3 w_out,
		    vec2 rand_P, vec2 rand_w,
		    output vec3 P_in, output vec3 w_in) float {
      P_in = P_out;
      w_in = w_out;
      return 0.0;
    }
  }
}
