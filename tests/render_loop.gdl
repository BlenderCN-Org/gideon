scene __gd_scene;
scene __gd_output;
scene __gd_rng;

extern void print(int x, int y) : gde_print_coords;
extern int my_draw(int x, int y, int idx, output vec3 color, scene out) : gde_draw_coords;

extern void __print_string(output string s) : gde_print_string;
void print_string(string s) { __print_string(s); }

extern void __print_ray(output ray r) : gde_print_ray;
void print_ray(ray r) { __print_ray(r); }

extern bool __isect_attribute(output isect i, output string name, scene s, output vec3 color) : gde_isect_get_attribute3;
bool isect:attribute(isect i, string name, output vec3 color) {
  return __isect_attribute(i, name, __gd_scene, color);
}

extern bool __isect_attribute(output isect i, output string name, scene s, output vec2 color) : gde_isect_get_attribute2;
bool isect:attribute(isect i, string name, output vec2 color) {
  return __isect_attribute(i, name, __gd_scene, color);
}

extern int __scene_num_lights(scene s) : gde_scene_num_lights;
int scene:num_lights() { return __scene_num_lights(__gd_scene); }

extern void __scene_get_light(scene s, int id, output light l) : gde_scene_get_light;
light scene:get_light(int id) {
  light l;
  __scene_get_light(__gd_scene, id, l);
  return l;
}

extern float __random(scene rng) : gde_gen_random;
float random() { return __random(__gd_rng); }

extern void __dir_to_point(output vec4 P, output vec3 O, output vec3 D, output vec3 nD) : gde_dir_to_point;
void dir_to_point(vec4 P, vec3 O, output vec3 D, output vec3 nD) { __dir_to_point(P, O, D, nD); }

//Temporary Functions
extern void __isect_normal(output isect i, scene s, output vec3 N) : gde_isect_normal;
vec3 isect:normal(isect i) {
  vec3 N;
  __isect_normal(i, __gd_scene, N);
  return N;
}

extern void __ray_point(output ray r, float t, output vec3 P) : gde_ray_point;
vec3 ray:point(ray r, float t) {
  vec3 P;
  __ray_point(r, t, P);
  return P;
}

extern void __light_sample_position(light lt, output vec3 P, float rand_u, float rand_v,
				    output vec4 P_out) : gde_light_sample_position;
vec4 light:sample_position(light lt, vec3 P, float rand_u, float rand_v) {
  vec4 P_out;
  __light_sample_position(lt, P, rand_u, rand_v, P_out);
  return P_out;
}

extern void __light_eval_radiance(light lt, output vec3 P, output vec3 I,
				  output vec3 R) : gde_light_eval_radiance;
vec3 light:eval_radiance(light lt, vec3 P, vec3 I) {
  vec3 R;
  __light_eval_radiance(lt, P, I, R);
  return R;
}

extern void __vec4_to_vec3(output vec4 v4, output vec3 v3) : gde_vec4_to_vec3;
vec3 vec4_to_vec3(vec4 v) { vec3 v3; __vec4_to_vec3(v, v3); return v3; }

vec3 comp_mul(vec3 lhs, vec3 rhs) { return vec3(lhs.x*rhs.x, lhs.y*rhs.y, lhs.z*lhs.z); }

vec3 scale(vec3 v, float k) { return vec3(k*v.x, k*v.y, k*v.z); }

extern void __gen_ray(output vec3 O, output vec3 D, float max_t,
		      output ray r) : gde_gen_ray;
ray gen_ray(vec3 O, vec3 D, float max_t) { ray r; __gen_ray(O, D, max_t, r); return r; }

//Standard Library Functions
extern float __ray_max_dist(output ray r) : gde_ray_max_dist;
float ray:max_dist(ray r) { return __ray_max_dist(r); }

extern bool __trace(output ray r, output isect i, scene s) : gde_trace;
bool trace(ray r, output isect hit) { return __trace(r, hit, __gd_scene); }

extern float __isect_dist(output isect i) : gde_isect_dist;
float isect:distance(isect i) { return __isect_dist(i); }

extern void __camera_shoot_ray(int x, int y, scene s, output ray r) : gde_camera_shoot_ray;
ray camera:shoot_ray(int x, int y) {
  ray r;
  __camera_shoot_ray(x, y, __gd_scene, r);
  return r;
}

//Vector Operations
extern float __dot_v3(output vec3 a, output vec3 b) : gde_dot_v3;
float dot(vec3 a, vec3 b) { return __dot_v3(a, b); }

extern void __normalize_v3(output vec3 v, output vec3 n) : gde_normalize_v3;
vec3 normalize(vec3 v) { vec3 r; __normalize_v3(v, r); return r; }

extern float __length_v3(output vec3 v) : gde_length_v3;
float length(vec3 v) { return __length_v3(v); }

//Draw Functions
int draw(int x, int y, int idx, vec3 color) {
  return my_draw(x, y, idx, color, __gd_output);
}

ray gen_shadow_ray(vec3 P, vec3 P_lt) {
  vec3 dir = P_lt - P;
  float dist_lt = length(dir);
  dir = normalize(dir);

  return gen_ray(P, dir, dist_lt);
}

//Entry Point
void main(int x_size, int y_size) {
  int idx = 0;
  isect ray_hit;
  vec3 up = vec3(0.0, 0.0, 1.0);
  
  int num_lights = scene:num_lights();
  int num_samples = 8;
  float inv_num_samples = 1.0 / 8.0;

  for (int i = 0; i < y_size; i = i + 1) {
    for (int j = 0; j < x_size; j = j + 1) {
      ray r = camera:shoot_ray(j, i);
      vec3 L = vec3(0.0, 0.0, 0.0);

      if (trace(r, ray_hit)) {
	vec3 norm = isect:normal(ray_hit);
	vec3 P = ray:point(r, isect:distance(ray_hit));
	
	for (int l_id = 0; l_id < num_lights; l_id = l_id + 1) {
	  light lt = scene:get_light(l_id);

	  for (int sample_id = 0; sample_id < num_samples; sample_id = sample_id + 1) {
	    vec4 P_lt4 = light:sample_position(lt, P, random(), random());
	    vec3 P_lt = vec3(P_lt4.x, P_lt4.y, P_lt4.z);

	    vec3 I;
	    vec3 nI;
	    dir_to_point(P_lt4, P, I, nI);
	    
	    ray shadow_ray = gen_shadow_ray(P, P_lt);
	    isect shadow_hit;
	    
	    if (trace(shadow_ray, shadow_hit)) { }
	    else {
	      vec3 R = light:eval_radiance(lt, P_lt, I);
	      float fac = dot(nI, norm);
	      
	      L = L + scale(scale(R, fac), inv_num_samples);
	    }
	  }
	}
      }

      vec2 uv_coords = vec2(1.0, 1.0);
      vec3 color = vec3(1.0, 1.0, 1.0);
      if (isect:attribute(ray_hit, "attribute:my_colors", color)) L = comp_mul(L, color);
      if (isect:attribute(ray_hit, "uv:UVMap", uv_coords)) L = comp_mul(L, vec3(uv_coords.x, uv_coords.y, 1.0));
      
      idx = draw(j, i, idx, L);
    }
  }
}
