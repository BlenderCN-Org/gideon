
distribution test(int z) {
  function evaluate(vec3 P_in, vec3 w_in,
		    vec3 P_out, vec3 w_out,
		    output float pdf) vec4 {
    pdf = 1.0;
    return vec4(z, z, z, 1.0);
  }
  
  function sample(vec3 P_out, vec3 w_out,
		  vec2 rand_P, vec2 rand_w,
		  output vec3 P_in, output vec3 w_in) float {
    P_in = P_out;
    w_in = w_out;
    
    return z;
  }
}

function output_array(float k, output float[] aref) float {
  float sum = 0.0;

  for (int i = 0; i < aref.length; i += 1) {
    sum += k*aref[i];
  }

  return sum;
}

function array_sum(float[] arr) float {
  float sum = 0.0;

  for (int i = 0; i < arr.length; i += 1) {
    sum += arr[i];
  }

  return sum * output_array(3.0, arr);
}

function bar(float y, output float z) float {
  z = -0.5;
  return 2.0 * y;
}

function foo(int x) float {
  float f_x = (3 + x);
  f_x = -(f_x + 7);
  
  int i_x = f_x;
  float z = 3;
  float w = bar(x, z);
  
  dfunc d = test(567 + x);

  float[2] arr = float[](1.0, 3.0);
  z += array_sum(arr);

  return i_x + w + z;
}
